def variantsList


if(android.hasProperty("applicationVariants")) {
    variantsList = android.applicationVariants
} else if(android.hasProperty("libraryVariants")) {
    variantsList = android.libraryVariants
} else if(android.hasProperty("testVariants")) {
    variantsList = android.testVariants
}
 
variantsList.all { variant ->

    def buildVariant = variant.variantData.getVariantConfiguration().getFullName().capitalize();
    def buildType = variant.buildType.name

    def mainLayoutDir = "$projectDir/src/main/res"
    def buildLayoutDir = "$projectDir/src/$buildType/res"
    def flavorLayoutDir = ""

    def variantBuildDir = "$variant.mergeResources.outputDir"
    def bundleBuildDirBase = ""
    def bundleBuildDir = "" 

    def packageTaskName = "package"+buildVariant+"Resources"
    if(tasks.hasProperty(packageTaskName)){
        bundleBuildDirBase = tasks[packageTaskName].outputDir
        bundleBuildDir = "$bundleBuildDirBase"
    }

    def inputDirs = [ mainLayoutDir, buildLayoutDir ]
    if(variant.variantData.getVariantConfiguration().hasFlavors()) {  
        def flavor = variant.getVariantData().getVariantConfiguration().getFlavorName()
        flavorLayoutDir = "$projectDir/src/$flavor/res"
        inputDirs = [ mainLayoutDir, buildLayoutDir, flavorLayoutDir]
    }

    variant.outputs.each { output ->
        def includedXMLTags = ['text','hint','title','dialogTitle','summary','dialogMessage','negativeButtonText','positiveButtonText','summaryOff','summaryOn','switchTextOff','switchTextOn'/*,'contentDescription'*/]

        def taskNameMerge = "applangaMerge$buildVariant"
        final def task1 = task("$taskNameMerge"(type: Copy){
            description = 'Replaces String ID References with String ID values in all packaged Layout files'
            inputDirs.each{ inputDir ->
                from(inputDir) {
                    include 'layout/**/*.xml'
                    include 'menu/**/*.xml'
                    include 'xml**/**/*.xml'
                    includeEmptyDirs = false
                    filter { String line ->
                        def replace = false
                        includedXMLTags.any { tag ->
                            if(line.contains('android:' + tag + '=')){
                                replace = true
                            }
                        }
                        (replace) ? line.replaceAll('@string/', '') :  line
                    }

                }
            }
                into variantBuildDir
        })

        def taskNameBundle = "applangaBundle$buildVariant"
        final def task2 = task("$taskNameBundle"(type: Copy){
            description = 'Replaces String ID References with String ID values in all packaged Layout files'
            inputDirs.each{ inputDir ->
                from(inputDir) {
                    include 'layout/**/*.xml'
                    include 'menu/**/*.xml'
                    include 'xml**/**/*.xml'
                    includeEmptyDirs = false
                    filter { String line ->
                        def replace = false
                        includedXMLTags.any { tag ->
                            if(line.contains('android:' + tag + '=')){
                                replace = true
                            }
                        }
                        (replace) ? line.replaceAll('@string/', '') :  line
                    }
                }
            }
                into bundleBuildDir
        })

        final def applangaParseIgnoredStrings = tasks.create(name: "applangaParseIgnoredStrings$buildVariant") << {
            def buildValues = new File("$variant.mergeResources.outputDir/values/values.xml")
            if(buildValues.exists()){
                def ignoredStringsFile = new File("$variant.mergeResources.outputDir/raw/applanga_ignore.strings");
                def ignoredStrings = "";
                def parsedValuesXml = (new XmlParser()).parse(buildValues)

                parsedValuesXml.children().each{ element ->
                    if(element.name() == "string" || element.name() == "string-array" ) {
                    //println element.@name
                    if(element.@translatable != null) {
                        println "translatable: "+ element.@translatable + " - Element: " + element.@name
                            if(element.@translatable == "false" || element.@translatable == false) {
                                //println "Name: " + element.name() + " String: " +  element.@name + ", translatable : " + element.@translatable
                                ignoredStrings = ignoredStrings + element.@name + ","
                            }
                        }
                    }
                }

                def rawFolder = new File("$variant.mergeResources.outputDir/raw");
                if(rawFolder.exists()) {
                    ignoredStringsFile.createNewFile();
                    ignoredStringsFile.write(ignoredStrings)
                }

                /*
                if(tasks.hasProperty(packageTaskName))
                {
                    def rawFolderPack = new File("$bundleBuildDirBase/raw");
                    if(rawFolderPack.exists()) {
                        def ignoredStringsFilePack = new File("$bundleBuildDirBase/raw/applanga_ignore.strings");
                        ignoredStringsFilePack.createNewFile();
                        ignoredStringsFilePack.write(ignoredStrings)
                    }
                }*/
            }
        }

        variant.mergeResources.finalizedBy(task1)

        if(tasks.hasProperty(packageTaskName))
        {
            tasks[packageTaskName].finalizedBy(task2)
        }

        applangaParseIgnoredStrings.mustRunAfter task1
        output.processResources.dependsOn applangaParseIgnoredStrings
    }
}

repositories {
    maven { url 'https://raw.github.com/applanga/sdk-android/master/maven/releases/' }
}
