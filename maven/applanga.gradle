//path should not end with '/'!
//create path if does'nt exist
def createFileSafe(pathToFileDir, fileName){
    //logger.error "${pathToFileDir}/${fileName}"
    def fileDir = new File(pathToFileDir);
    if(!fileDir.exists()){
        fileDir.mkdirs();//mkdir != mkdirs (!)
    }
    def file = new File(pathToFileDir + "/" + fileName);
    file.createNewFile();
    return file;
}

def getValidXmlParser(File f){
    def result
    try{
        // can fail on windows due to wrong xml encoding (windows-1252 instead of UTF-8)
        result = (new XmlParser()).parse(f)
    } catch (Exception) {
        //guess encoding and parse again
        groovy.util.CharsetToolkit toolkit = new CharsetToolkit(f)
        logger.error "warning: $f is not proper UTF-8, indicate encoding!"
        result = (new XmlParser()).parseText(f.getText(toolkit.getCharset().displayName()))
    }
    return result
}

def getValidXmlFiles(inputFiletrees){
    // get all xml files in value dir (buildtype|flavor|main)

    def set = [] as Set
    inputFiletrees.each{ inputFiletree ->
        inputFiletree = inputFiletree.matching {
            include "layout**/*.xml"
            include "menu**/*.xml"
            include "xml**/*.xml"
        }
        set.addAll(inputFiletree.getFiles())
    }

    def validXmlFiles = []
    set.each { f -> validXmlFiles << f.getName()}
    return validXmlFiles
}

def getStyleFiles(inputFiletrees){
        // get all xml files in value dir (buildtype|flavor|main)
    def set = [] as Set
    inputFiletrees.each{ inputFiletree ->
        inputFiletree = inputFiletree.matching {
            include "values**/*.xml"
        }
        set.addAll(inputFiletree.getFiles())
    }

    def styleFiles = []
    set.each { f -> styleFiles << f}
    return styleFiles
}

def getStyleStrings(node, includedXMLTags){
    def strings = [] as Set
    node.childNodes().each { child ->
        child.attributes().each{ attribute ->
            includedXMLTags.each { tag ->
            String androidTag = "android:" + tag
            if(attribute.getKey().equals("name") && attribute.getValue().equals(androidTag) && child.text().contains("@string/")){
                try{
                    strings << child.text()
                    } catch (Exception){

                    }
                }
            }
        }
       getStyleStrings(child, includedXMLTags).each{ strings << it }
    }
    return strings
}

//style xml differs from layout files
def replaceAtStringForStyle(node,includedXMLTags, stringToReplace) {
    node.childNodes().each { child ->
        child.attributes().each{ attribute ->
            includedXMLTags.each { tag ->
                String androidTag = "android:" + tag
                if(attribute.getValue().equals(androidTag) && child.text().equals(stringToReplace)){
                    try{
                            child.replaceBody(stringToReplace.replace("@string/", "")) // replaceBody is from NodeChildren - groovy.util.slurpersupport
                        } catch (Exception e){
                    }
                }
            }
        }

        // recursive
        replaceAtStringForStyle(child, includedXMLTags, stringToReplace)
    }

    return node
}

def replaceAtString(node,includedXMLTags) {
    node.childNodes().each { child ->

        child.attributes().each{ attribute ->
            includedXMLTags.each { tag ->
                String androidTag = "android:" + tag
                if(attribute.getKey().equals(androidTag) && attribute.getValue().contains("@string/")){
                    
                    def applangaKey = '';

                    // don't always replace @string  --> better tag the view
                    if(tag.equals('text')){
                        applangaKey = 'APPLANGA_TEXT_STRINGID_KEY';                        
                    }
                    else if(tag.equals('hint')){
                        applangaKey = 'APPLANGA_HINT_STRINGID_KEY';
                    }
                    if( ! applangaKey.equals('')){
                        def viewTagXml = '<tag android:id="' + '@id/' + applangaKey + '" android:value="' + attribute.getValue().replace("@string/", "") + '"/>';
                        def viewTag = new XmlSlurper(false,false).parseText(viewTagXml);
                        child.addChild(viewTag);
                    } else {
                        // if no tag is set -> fallback: replace @string
                        child.attributes()[attribute.getKey()] = attribute.getValue().replace("@string/", "")
                    }
                }
            }
        }

        // recursive
        replaceAtString(child, includedXMLTags)
    }
    return node
}

def checkForDuplicates(commaSeparatedString, element){
    def duplicated = false
    commaSeparatedString.split(',').each{ value ->
        if(element.equals(value)){
            duplicated = true
        }
    }
    return duplicated
}

def variantsList
def isLibrary = false;

if(android.hasProperty("applicationVariants")) {
    variantsList = android.applicationVariants
} else if(android.hasProperty("libraryVariants")) {
    isLibrary = true;
    variantsList = android.libraryVariants
}
//if(android.hasProperty("testVariants")) {}
variantsList.all { variant ->

    def buildVariant = variant.variantData.getVariantConfiguration().getFullName().capitalize();
    def variantBuildDir = variant.mergeResources.outputDir
    def packageLibraryTaskName = "package"+buildVariant+"Resources";
    //library config
    if(isLibrary){
        if(tasks.hasProperty(packageLibraryTaskName)){
            //override output for libraries
            variantBuildDir = tasks[packageLibraryTaskName].outputDir
        }
    }
    def sourceSetsFiletrees = []
    variant.getSourceSets().each{
        sourceSetsFiletrees << it.getRes().getSourceFiles() // get res dir as a filetree
    }

    // get relevant xml files before merging
    def validXmlFiles = getValidXmlFiles(sourceSetsFiletrees)
    def styleFiles = getStyleFiles(sourceSetsFiletrees)

    //println validXmlFiles
    variant.outputs.each { output ->
        def includedXMLTags = ['text','hint','title','dialogTitle','summary','dialogMessage','negativeButtonText','positiveButtonText','summaryOff','summaryOn','switchTextOff','switchTextOn'/*,'contentDescription'*/]

        def taskNameMerge = "applangaMerge$buildVariant"
        final def applangaMerge = task("$taskNameMerge"() << {
            description = 'Replaces String ID References with String ID values in all packaged Layout, Menu, Xml, Value files'
            
            // <!-- STYLE XML
            def FileTree variantBuildDirTreeStyles = fileTree(variantBuildDir){
                include 'values**/**/*.xml'
            }

            def styleFilesBuildDir = [] as Set
            styleFilesBuildDir = variantBuildDirTreeStyles.getFiles()

            // get all strings which should be replaced
            def styleStringsToReplace = [] as Set
            styleFiles.each{ file -> 
                getStyleStrings(new XmlSlurper(false,false).parse(file.getAbsolutePath()), includedXMLTags).each{
                    styleStringsToReplace << it
                }
            }
                
            styleFilesBuildDir.each{ f ->
                def sXml = new XmlSlurper(false, false).parse(f)

                styleStringsToReplace.each{ s ->
                    replaceAtStringForStyle(sXml, includedXMLTags, s)
                }

                def sXmlFileString = groovy.xml.XmlUtil.serialize(sXml)
                f.delete()
                f.write(sXmlFileString, 'UTF-8') // style xml save to file
            }

            // STYLE XML -->

            def FileTree variantBuildDirTree = fileTree(variantBuildDir){
                include 'layout**/**/*.xml'
                include 'menu**/**/*.xml'
                include 'xml**/**/*.xml'
            }

            def files = [] as Set
            files = variantBuildDirTree.getFiles()

            files.each { f ->
                def matching = false

                validXmlFiles.each { vf ->
                    if(vf.equals(f.getName())){
                        matching = true
                    }
                }

                if(matching){
                    def fXml = new XmlSlurper(false, false).parse(f)
                    fXml = replaceAtString(fXml, includedXMLTags)
                    
                    //println "modified file: " + f.getPath()
                    def xmlFileString = groovy.xml.XmlUtil.serialize(fXml)
                    f.delete()
                    f.write(xmlFileString, 'UTF-8')
                }
            }
        })

        final def applangaParseIgnoredStrings = tasks.create(name: "applangaParseIgnoredStrings$buildVariant") << {
            def buildValues = new File("${variantBuildDir}/values/values.xml")
            if(buildValues.exists()){
                def ignoredStrings = "";
                def parsedValuesXml = getValidXmlParser(buildValues) // to avoid encoding errors (mostly windows)

                parsedValuesXml.children().each{ element ->
                    if(element.name() == "string" || element.name() == "string-array" || element.name() == "plurals") {
                    //println element.@name
                    if(element.@translatable != null) {
                        println "translatable: "+ element.@translatable + " - Element: " + element.@name
                            if(element.@translatable == "false" || element.@translatable == false) {
                                //println "Name: " + element.name() + " String: " +  element.@name + ", translatable : " + element.@translatable
                                
                                def ignoreElement = element.@name
                                // if element contains "." we have to have two versions, the original and underscores instead of points
                                ignoreElement = ignoreElement.contains('.') ? ignoreElement.replaceAll('\\.','_') + "," + ignoreElement : ignoreElement;

                                ignoredStrings = ignoredStrings + ignoreElement + ","
                            }
                        }
                    }
                }
                def ignoreFileName = !isLibrary ? "applanga_ignore.strings" : applicationId.replaceAll('\\.','_') + "_applanga_ignore.strings"

                //merge ignore strings with library strings
                if(!isLibrary){
                    def FileTree applangaIgnoreFileTree = fileTree("${variantBuildDir}/raw"){
                        include '*_applanga_ignore.strings'
                    }
                    applangaIgnoreFileTree.getFiles().each{ f ->
                        try {
                            def ignoredStringsLibrary = new File(f.getAbsolutePath()).getText('UTF-8')
                            ignoredStringsLibrary.split(',').each{ item ->
                                if(!checkForDuplicates(ignoredStrings, item)){
                                    ignoredStrings = ignoredStrings + item + ","
                                }
                            }
                        } catch (e) {}
                    }

                }
                File ignoredStringsFile = createFileSafe("${variantBuildDir}/raw", ignoreFileName);
                ignoredStringsFile.write(ignoredStrings, 'UTF-8')
            }
        }

        final def applangaParseAllowedStrings = tasks.create(name: "applangaParseAllowedStrings$buildVariant") << {
            def allowedStrings = "";

            sourceSetsFiletrees.each { sourceSetsFiletree -> 
                sourceSetsFiletree = sourceSetsFiletree.matching {
                    include "values**/*.xml"
                }

                sourceSetsFiletree.getFiles().each(){ f ->
                    def parsedValuesXml = getValidXmlParser(f) // to avoid encoding errors (mostly windows)

                    // parsedValuesXml instance of node
                    // parsedValuesXml.children() instance of list
                    parsedValuesXml.children().each { element ->
                        // element instance of Node
                        if(element instanceof groovy.util.Node){
                            if(element.name() == "string" || element.name() == "string-array" || element.name() == "plurals" ) {
                                def allowedElement = element.@name
                                def addToAllowedStrings = false
                                //avoiding duplicates
                                def alreadyExistingInAllowedStrings = false
                                allowedStrings.split(',').each{ value ->
                                    if(allowedElement.equals(value)){
                                        alreadyExistingInAllowedStrings = true
                                    }
                                }

                                if(element.@translatable != null) {
                                    //println "translatable: "+ element.@translatable + " - Element: " + element.@name
                                    if((element.@translatable == true) || (element.@translatable == "true")) {
                                        //println "Name: " + element.name() + " String: " +  element.@name + ", translatable : " + element.@translatable
                                        addToAllowedStrings = true
                                    }
                                } else {
                                    //println "translatable: false - Element: " + element.@name
                                    addToAllowedStrings = true
                                }
                                if(addToAllowedStrings && !alreadyExistingInAllowedStrings){
                                    //same as for ignored strings
                                    allowedElement = allowedElement.contains('.') ? allowedElement.replaceAll('\\.','_') + "," + allowedElement : allowedElement;

                                    allowedStrings = allowedStrings + allowedElement + ","
                                }
                            }
                        } else {
                            throw new GradleException("The resource file: $f is corrupt. $element is not a Node. Please contact Applanga for support.")
                        }
                    }
                }
            }
            def allowFileName = !isLibrary ? "applanga_allow.strings" : applicationId.replaceAll('\\.','_') + "_applanga_allow.strings"
            //merge allow strings from other librarys
            if(!isLibrary){
                def FileTree applangaAllowFileTree = fileTree("${variantBuildDir}/raw"){
                    include '*_applanga_allow.strings'
                }
                applangaAllowFileTree.getFiles().each{ f ->
                    try {
                        //merge allowed strings with library strings
                        def allowedStringsLibrary = new File(f.getAbsolutePath()).getText('UTF-8')
                        allowedStringsLibrary.split(',').each{ item ->
                            if(!checkForDuplicates(allowedStrings, item)){
                                allowedStrings = allowedStrings + item + ","
                            }
                        }
                    } catch (e) {}
                }
            }
            def allowedStringsFile = createFileSafe("${variantBuildDir}/raw", allowFileName);
            allowedStringsFile.write(allowedStrings, 'UTF-8')

        }

        final def applangaSetPackageName = tasks.create(name: "applangaSetPackageName$buildVariant") << {
            
            def originalPackageName = variant.getGenerateBuildConfig().buildConfigPackageName;

            def manifests = [output.processManifest.manifestOutputFile]
            try{ // in case there is no instan-run manifest
                manifests.add(output.processManifest.instantRunManifestOutputFile)
            } catch (e){}
            
            manifests.each
            { manifestOutFile ->
                if (manifestOutFile.exists()) {
                    def mergedManifestParser = getValidXmlParser(manifestOutFile)
                    def packageNameNode = new Node(null, 'meta-data', ["android:name":'ApplangaResourcePackage', "android:value":"$originalPackageName"])
                    mergedManifestParser.find { element -> element.name() == 'application' }.children().add(packageNameNode)
                    def mergedManifestString = groovy.xml.XmlUtil.serialize(mergedManifestParser)
                    manifestOutFile.write(mergedManifestString, 'UTF-8')
                }
            }

        }
        applangaSetPackageName.dependsOn(output.processManifest)

        if(!isLibrary){
            variant.mergeResources.finalizedBy(applangaMerge)
            output.processManifest.finalizedBy(applangaSetPackageName) // only if it's not a library
        } else {
            if(tasks.hasProperty(packageLibraryTaskName))
                {
                    tasks[packageLibraryTaskName].finalizedBy(applangaMerge)
                }
        }

        applangaMerge.finalizedBy(applangaParseAllowedStrings);
        applangaParseAllowedStrings.finalizedBy(applangaParseIgnoredStrings);

        //applangaParseIgnoredStrings.mustRunAfter applangaMerge
        output.processResources.dependsOn applangaParseIgnoredStrings
        //applangaParseIgnoredStrings.dependsOn applangaParseAllowedStrings
    }
}

repositories {
    maven { url 'https://raw.github.com/applanga/sdk-android/master/maven/releases/' }
}